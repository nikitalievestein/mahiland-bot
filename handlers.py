from aiogram import Dispatcher, types
from aiogram.filters import Command
from game_data import game_state, save_game_state

def setup_handlers(dp: Dispatcher):
    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        user_id = message.from_user.id
        if user_id in game_state:
            await message.answer("–í—ã —É–∂–µ –ø—Ä–∞–≤–∏—Ç–µ Mahiland! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å /stats")
            return

        kb = [
            [types.KeyboardButton(text="–ù–∞—Ä–æ–¥–Ω–∞—è –ø–∞—Ä—Ç–∏—è"), types.KeyboardButton(text="–õ–∏–±–µ—Ä–∞–ª—å–Ω–∞—è –ø–∞—Ä—Ç–∏—è")]
        ]
        markup = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=True)
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mahiland! –í—ã –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–∏—é:", reply_markup=markup)

    @dp.message(lambda message: message.text in ["–ù–∞—Ä–æ–¥–Ω–∞—è –ø–∞—Ä—Ç–∏—è", "–õ–∏–±–µ—Ä–∞–ª—å–Ω–∞—è –ø–∞—Ä—Ç–∏—è"])
    async def choose_party(message: types.Message):
        user_id = message.from_user.id
        party = message.text
        game_state[user_id] = {
            "gdp": 100_000_000_000,  # ‚Ç¨100B
            "budget": 10_000_000_000,  # ‚Ç¨10B
            "population": 2_500_000,
            "dissatisfaction": 20,
            "army_funding": 0,
            "army_type": None,
            "party": party,
            "tax_rate": 20,
            "days_passed": 0,
            "infrastructure": {},
            "maintenance_cost": 0
        }
        if party == "–õ–∏–±–µ—Ä–∞–ª—å–Ω–∞—è –ø–∞—Ä—Ç–∏—è":
            game_state[user_id]["gdp"] *= 1.1  # +10% GDP
            game_state[user_id]["dissatisfaction"] += 5  # +5% –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∞
        else:
            game_state[user_id]["dissatisfaction"] -= 5  # -5% –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∞

        await message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {party}! –¢–µ–ø–µ—Ä—å –≤—ã –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç Mahiland.\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n/stats - –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω—ã\n/economy - –≠–∫–æ–Ω–æ–º–∏–∫–∞\n/army - –ê—Ä–º–∏—è\n/infrastructure - –ü–æ—Å—Ç—Ä–æ–π–∫–∏\n/population - –ù–∞—Å–µ–ª–µ–Ω–∏–µ",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await save_game_state()

    @dp.message(Command("stats"))
    async def cmd_stats(message: types.Message):
        user_id = message.from_user.id
        if user_id not in game_state:
            await message.answer("–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start!")
            return

        state = game_state[user_id]
        report = (
            f"üìä –°—Ç–∞—Ç—É—Å Mahiland üìä\n"
            f"–ü–∞—Ä—Ç–∏—è: {state['party']}\n"
            f"–î–Ω–µ–π —É –≤–ª–∞—Å—Ç–∏: {state['days_passed']}\n"
            f"GDP: ‚Ç¨{state['gdp']:,.0f}\n"
            f"–ë—é–¥–∂–µ—Ç: ‚Ç¨{state['budget']:,.0f}\n"
            f"–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {state['population']:,}\n"
            f"–ù–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ: {state['dissatisfaction']}%\n"
            f"–ê—Ä–º–∏—è: {state['army_type'] or '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}\n"
            f"–ù–∞–ª–æ–≥–∏: {state['tax_rate']}%"
        )
        await message.answer(report)
        await save_game_state()

    @dp.message(Command("economy"))
    async def cmd_economy(message: types.Message):
        user_id = message.from_user.id
        if user_id not in game_state:
            await message.answer("–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start!")
            return

        state = game_state[user_id]
        kb = [
            [types.KeyboardButton(text="–ü–æ–≤—ã—Å–∏—Ç—å –Ω–∞–ª–æ–≥–∏"), types.KeyboardButton(text="–ü–æ–Ω–∏–∑–∏—Ç—å –Ω–∞–ª–æ–≥–∏")],
            [types.KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ]
        markup = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer(
            f"–≠–∫–æ–Ω–æ–º–∏–∫–∞:\nGDP: ‚Ç¨{state['gdp']:,.0f}\n–ë—é–¥–∂–µ—Ç: ‚Ç¨{state['budget']:,.0f}\n–ù–∞–ª–æ–≥–∏: {state['tax_rate']}%",
            reply_markup=markup
        )

    @dp.message(lambda message: message.text in ["–ü–æ–≤—ã—Å–∏—Ç—å –Ω–∞–ª–æ–≥–∏", "–ü–æ–Ω–∏–∑–∏—Ç—å –Ω–∞–ª–æ–≥–∏"])
    async def adjust_taxes(message: types.Message):
        user_id = message.from_user.id
        if user_id not in game_state:
            await message.answer("–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start!")
            return

        state = game_state[user_id]
        if message.text == "–ü–æ–≤—ã—Å–∏—Ç—å –Ω–∞–ª–æ–≥–∏":
            state["tax_rate"] += 5
            state["dissatisfaction"] += 10
            await message.answer(f"–ù–∞–ª–æ–≥–∏ –ø–æ–≤—ã—à–µ–Ω—ã –¥–æ {state['tax_rate']}%! –ù–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ: {state['dissatisfaction']}%")
        else:
            state["tax_rate"] = max(5, state["tax_rate"] - 5)
            state["dissatisfaction"] -= 5
            await message.answer(f"–ù–∞–ª–æ–≥–∏ –ø–æ–Ω–∏–∂–µ–Ω—ã –¥–æ {state['tax_rate']}%! –ù–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ: {state['dissatisfaction']}%")
        await save_game_state()

    @dp.message(Command("army"))
    async def cmd_army(message: types.Message):
        user_id = message.from_user.id
        if user_id not in game_state:
            await message.answer("–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start!")
            return

        state = game_state[user_id]
        if not state["army_type"]:
            kb = [
                [types.KeyboardButton(text="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è"), types.KeyboardButton(text="–ü—Ä–∏–∑—ã–≤–Ω–∞—è")]
            ]
            markup = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ä–º–∏–∏:\n"
                "- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è: –¥–æ—Ä–æ–≥–∞—è, –Ω–æ —Å–∏–ª—å–Ω–∞—è\n"
                "- –ü—Ä–∏–∑—ã–≤–Ω–∞—è: –¥–µ—à–µ–≤–∞—è, –Ω–æ —Å–ª–∞–±–∞—è",
                reply_markup=markup
            )
        else:
            await message.answer(
                f"–í–∞—à–∞ –∞—Ä–º–∏—è: {state['army_type']}\n–§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚Ç¨{state['army_funding']:,.0f}",
                reply_markup=types.ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text="–ù–∞–∑–∞–¥")]])
            )

    @dp.message(lambda message: message.text in ["–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è", "–ü—Ä–∏–∑—ã–≤–Ω–∞—è"])
    async def set_army_type(message: types.Message):
        user_id = message.from_user.id
        if user_id not in game_state:
            await message.answer("–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start!")
            return

        state = game_state[user_id]
        state["army_type"] = message.text
        state["army_funding"] = 500_000_000 if message.text == "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è" else 100_000_000
        await message.answer(
            f"–ê—Ä–º–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {state['army_type']}!\n–§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚Ç¨{state['army_funding']:,.0f}",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await save_game_state()

    @dp.message(Command("infrastructure"))
    async def cmd_infrastructure(message: types.Message):
        user_id = message.from_user.id
        if user_id not in game_state:
            await message.answer("–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start!")
            return

        state = game_state[user_id]
        projects = {
            "–ì–æ—Å–ø–∏—Ç–∞–ª—å": {"cost": 2_000_000_000, "effect": "–ù–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ -10%", "dissatisfaction": -10},
            "–î–æ—Ä–æ–≥–∏": {"cost": 1_500_000_000, "effect": "GDP +5%", "gdp": 0.05},
            "–®–∫–æ–ª–∞": {"cost": 1_000_000_000, "effect": "–ù–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ -5%", "dissatisfaction": -5}
        }
        kb = [[types.KeyboardButton(text=f"–ü–æ—Å—Ç—Ä–æ–∏—Ç—å {name}")] for name in projects]
        kb.append([types.KeyboardButton(text="–ù–∞–∑–∞–¥")])
        markup = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        projects_list = "\n".join(f"- {name}: ‚Ç¨{data['cost']:,.0f} ({data['effect']})" for name, data in projects.items())
        await message.answer(
            f"–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:\n–ë—é–¥–∂–µ—Ç: ‚Ç¨{state['budget']:,.0f}\n–ü—Ä–æ–µ–∫—Ç—ã:\n{projects_list}",
            reply_markup=markup
        )

    @dp.message(lambda message: message.text.startswith("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å "))
    async def build_project(message: types.Message):
        user_id = message.from_user.id
        if user_id not in game_state:
            await message.answer("–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start!")
            return

        state = game_state[user_id]
        project_name = message.text.replace("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å ", "")
        projects = {
            "–ì–æ—Å–ø–∏—Ç–∞–ª—å": {"cost": 2_000_000_000, "effect": "–ù–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ -10%", "dissatisfaction": -10},
            "–î–æ—Ä–æ–≥–∏": {"cost": 1_500_000_000, "effect": "GDP +5%", "gdp": 0.05},
            "–®–∫–æ–ª–∞": {"cost": 1_000_000_000, "effect": "–ù–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ -5%", "dissatisfaction": -5}
        }
        if project_name not in projects:
            await message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç!")
            return

        project = projects[project_name]
        if state["budget"] < project["cost"]:
            await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ ‚Ç¨{project['cost']:,.0f}")
            return

        state["budget"] -= project["cost"]
        state["maintenance_cost"] += project["cost"] * 0.01
        if "dissatisfaction" in project:
            state["dissatisfaction"] = max(0, state["dissatisfaction"] + project["dissatisfaction"])
        if "gdp" in project:
            state["gdp"] *= (1 + project["gdp"])
        state["infrastructure"][project_name] = state["infrastructure"].get(project_name, 0) + 1

        await message.answer(
            f"{project_name} –ø–æ—Å—Ç—Ä–æ–µ–Ω!\n–ë—é–¥–∂–µ—Ç: ‚Ç¨{state['budget']:,.0f}\n–≠—Ñ—Ñ–µ–∫—Ç: {project['effect']}"
        )
        await save_game_state()

    @dp.message(Command("population"))
    async def cmd_population(message: types.Message):
        user_id = message.from_user.id
        if user_id not in game_state:
            await message.answer("–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start!")
            return

        state = game_state[user_id]
        population_change = random.randint(-1000, 2000)
        state["population"] += population_change
        await message.answer(
            f"–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {state['population']:,}\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {population_change:+,}\n"
            f"–ù–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ: {state['dissatisfaction']}%"
        )
        await save_game_state()

    @dp.message(Command("help"))
    async def cmd_help(message: types.Message):
        await message.answer(
            "Mahiland ‚Äî –∏–≥—Ä–∞, –≥–¥–µ –≤—ã –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç —Å—Ç—Ä–∞–Ω—ã!\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
            "/stats - –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω—ã\n"
            "/economy - –£–ø—Ä–∞–≤–ª—è—Ç—å —ç–∫–æ–Ω–æ–º–∏–∫–æ–π\n"
            "/army - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞—Ä–º–∏—é\n"
            "/infrastructure - –°—Ç—Ä–æ–∏—Ç—å –∑–¥–∞–Ω–∏—è\n"
            "/population - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )

    @dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥")
    async def go_back(message: types.Message):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=types.ReplyKeyboardRemove())